package com.study.post.web;

import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.study.common.exception.BizException;
import com.study.login.vo.UserVO;
import com.study.post.service.IPostService;
import com.study.post.vo.PostSearchVO;
import com.study.post.vo.PostVO;

@Controller
@RequestMapping("/post")
public class PostController {
	
	private final Logger logger = LoggerFactory.getLogger(getClass());
	
	@Autowired
	private IPostService postService;
	
	/**
	 * 쪽지함
	 * @param searchVO
	 * @param session
	 * @param model
	 * @return 
	 * @throws BizException
	 */
	@RequestMapping(value = "/postList.do")
	public String postList(@ModelAttribute("searchVO") PostSearchVO searchVO, HttpSession session, ModelMap model) throws BizException {		
		
		UserVO vo = (UserVO)session.getAttribute("USER_INFO");
		
		if (searchVO.getPostGubun() == 0) {
			searchVO.setArriver(vo.getUserId());  
		}else {
			searchVO.setSender(vo.getUserId());  
		}
		logger.debug("searchVO = {}", searchVO);
		
		List<PostVO> post = postService.getPostList(searchVO);
		logger.info("post = {}", post);
		
		model.addAttribute("post", post);
		
		return "post/postList";
	}
	
	/**
	 * 쪽지 보내기
	 * @param model
	 * @param session
	 * @return
	 * @throws BizException
	 */
	@RequestMapping("/postForm.do")
	public String postForm(ModelMap model, HttpSession session) throws BizException  {			
		// 중복방지 토큰 생성 
		String dup_key = UUID.randomUUID().toString();
		session.setAttribute("DUP_SUBMIT_PREVENT", dup_key);
		
		model.addAttribute("dup_key", dup_key);
		model.addAttribute("post", new PostVO());
		
		return "post/postForm";
	}
	
	
	/**
	 * 쪽지 보내기 처리
	 * @param post
	 * @param errors
	 * @return
	 * @throws BizException
	 */
	@RequestMapping(value = "/postRegist.do")
	public String postRegist(@ModelAttribute("po") @Valid PostVO post, BindingResult errors, ModelMap model, PostSearchVO searchVO) throws Exception {
		logger.debug("post : {}", post);
		
		if (errors.hasErrors()) {
			logger.debug("errors : {}", errors);
			
			return "post/postForm";
		}
		// 성공하면
		postService.getPostSend(post);
		
		return "redirect:/post/postList.do";
	}
		
	
	/**
	 * 쪽지 보기
	 * @param model
	 * @param num
	 * @return String
	 * @throws BizException
	 */
	@RequestMapping(value ="/postView.do", method = RequestMethod.GET, params = "postId")
	public String postView(ModelMap model, @RequestParam("postId")  int num) throws BizException  {				
		
		PostVO postVO = postService.getPostCheck(num);
		model.addAttribute("post", postVO);
		return "post/postView";
	}
	
	
	/**
	 * 답장 
	 * @param
	 * @return
	 * @throws BizException
	 */
	@RequestMapping("/postAnswer.do")
	public String postAnswer() throws BizException  {			
		return null;
	}
	
	
	/**
	 * 쪽지 삭제 
	 * @param session
	 * @return String
	 * @throws BizException
	 */
	@RequestMapping("/postDelete.do")
	public String postDelete( int[] posts) throws BizException  {
		logger.debug("posts={}", posts);
		
		postService.removePost(posts);
		
		return "redirect:postList.do";
	}
	
	
	
	

}
