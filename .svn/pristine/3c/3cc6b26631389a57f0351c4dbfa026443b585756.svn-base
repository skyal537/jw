package com.study.tour.web;

import java.lang.ProcessBuilder.Redirect;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.study.calendar.service.ICalendarService;
import com.study.calendar.vo.CalendarVO;
import com.study.data.service.IDataService;
import com.study.data.vo.AreaVO;
import com.study.tour.service.ITourService;
import com.study.tour.vo.PackSearchVO;
import com.study.tour.vo.PackageVO;
import com.study.tour.vo.ProdSearchVO;
import com.study.tour.vo.ProductVO;

@Controller
@RequestMapping("/tour")
public class TourController {
	
	private final Logger logger = LoggerFactory.getLogger(getClass());


	@Autowired
	ITourService tourService;
	
	@Autowired
	ICalendarService calService;
	
	@Autowired
	IDataService dataService;
	
	@RequestMapping("/tPackList.do")
	public String tPackList(ModelMap model,PackSearchVO searchVO) {
		
		List<PackageVO> pack = tourService.getPackageList(searchVO);
		//System.out.println(pack.);
		
		model.addAttribute("searchVO", searchVO);
		model.addAttribute("list", pack);
		List<AreaVO> area = dataService.getAreaList();
		model.addAttribute("areaList", area);
		return "tour/tPackList";
	}
	
	
	@RequestMapping("/tPackForm.do")
	public String tPackForm() {
		
		
		return "tour/tPackForm";
	}
	
	
	@RequestMapping("/tPackRegist.do")
	public String tPackRegist(ModelMap model,PackageVO pack) {
		logger.debug("package : {}", pack);
		tourService.registPackage(pack);
		
		return "tour/tPackList";
	}
	
	@RequestMapping("/tPackEdit.do")
	public String tPackEdit(ModelMap model,String packageId) {
		logger.debug("packageId : {}", packageId);
		PackageVO pack =  tourService.getPackage(packageId);
		model.addAttribute("pack", pack);
		return "tour/tPackEdit";
	}
	
	@RequestMapping("/tPackModify.do")
	public String tPackModify(ModelMap model,PackageVO pack) {
		logger.debug("package : {}", pack);
		tourService.updatePackage(pack);
		
		return "tour/tPackList";
	}
	
	@RequestMapping("/tPackDelete.do")
	public String tPackDelete(ModelMap model,String packageId) {
		logger.debug("packageId : {}", packageId);
		tourService.removePackage(packageId);
		
		return "tour/tPackList";
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	@RequestMapping("/tProdList.do")
	public String tProdList(ModelMap model,PackSearchVO searchVO, String packageId) {
		List<ProductVO> prod = tourService.getProdList(packageId);	//검색했을때는 빈이랑 파라미터랑 충돌??체크
		model.addAttribute("list", prod);
		PackageVO pack = tourService.getPackage(packageId);
		model.addAttribute("pack", pack);
		

		return "tour/tProdList";
	}
	
	@RequestMapping("/tProdView.do")
	public String tProdView(String productId, ModelMap model) {
		ProductVO product =tourService.getProduct(productId);
		List<CalendarVO> calList = calService.getCalendarList(productId);
		model.addAttribute("product", product);
		model.addAttribute("cal", calList);
		return "tour/tProdView";
	}
	
	@RequestMapping("/tProdDelete")
	public String tProdDelete(String productId, ModelMap model) {
		tourService.removeProduct(productId);
		
		return "tour/tPackList";
	}
	
	@RequestMapping("/tProdSelDelete")
	public String tProdSelDelete(String[] prods, String packageId,
												ModelMap model, RedirectAttributes redirect) {
		tourService.removeSelProduct(prods);
		
		redirect.addAttribute("packageId", packageId);
		return "redirect:/tour/tProdList.do";
	}
	
	@RequestMapping("/tProdEdit.do")
	public String tProdEdit(ModelMap model, String productId, PackSearchVO searchVO) {
		ProductVO product =tourService.getProduct(productId);
		PackageVO pack = tourService.getPackage(product.getPackageId());
		List<CalendarVO> calList = calService.getCalendarList(productId);
		model.addAttribute("prod", product);
		model.addAttribute("pack", pack);
		model.addAttribute("cal", calList);
		
		return "tour/tProdEdit";
	}
	
	@RequestMapping("/tProdForm.do")
	public String tProdForm(String packageId, ModelMap model) {
		PackageVO pack = tourService.getPackage(packageId);
		model.addAttribute("pack", pack);

		
		return "tour/tProdForm";
	}
	
	@RequestMapping("/tProdRegist.do")
	public String tProdRegist(ProductVO product, RedirectAttributes redirect) {
		logger.debug("product : {}", product);

		tourService.registProduct(product);
		redirect.addAttribute("packageId", product.getPackageId());
		return "redirect:/tour/tProdList.do";
	}
	
	@RequestMapping("/tProdModify.do")
	public String tProdModify(ProductVO product, RedirectAttributes redirect) {
		logger.debug("product : {}", product);
		tourService.updateProduct(product);
		
		redirect.addAttribute("packageId", product.getPackageId());
		return "redirect:/tour/tProdList.do";
	}
}
